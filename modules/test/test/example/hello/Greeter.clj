;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC implementation of Greeter service from package example.hello
;;;----------------------------------------------------------------------------------
(ns example.hello.Greeter
  (:require [example.hello :refer :all]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; GRPC Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; GRPC Greeter
;-----------------------------------------------------------------------------
(defprotocol Service
  (SayHello [this param])
  (SayRepeatHello [this param])
  (SayHelloAfterDelay [this param])
  (SayHelloOnDemand [this param])
  (SayHelloError [this param])
  (SayNil [this param]))

(defn- SayHello-dispatch
  [ctx request]
  (SayHello ctx request))
(defn- SayRepeatHello-dispatch
  [ctx request]
  (SayRepeatHello ctx request))
(defn- SayHelloAfterDelay-dispatch
  [ctx request]
  (SayHelloAfterDelay ctx request))
(defn- SayHelloOnDemand-dispatch
  [ctx request]
  (SayHelloOnDemand ctx request))
(defn- SayHelloError-dispatch
  [ctx request]
  (SayHelloError ctx request))
(defn- SayNil-dispatch
  [ctx request]
  (SayNil ctx request))

(def ^:const rpc-metadata
  [{:pkg "example.hello" :service "Greeter" :method "SayHello" :method-fn SayHello-dispatch :server-streaming false :client-streaming false :input pb->HelloRequest :output new-HelloReply}
   {:pkg "example.hello" :service "Greeter" :method "SayRepeatHello" :method-fn SayRepeatHello-dispatch :server-streaming true :client-streaming false :input pb->RepeatHelloRequest :output new-HelloReply}
   {:pkg "example.hello" :service "Greeter" :method "SayHelloAfterDelay" :method-fn SayHelloAfterDelay-dispatch :server-streaming false :client-streaming false :input pb->HelloRequest :output new-HelloReply}
   {:pkg "example.hello" :service "Greeter" :method "SayHelloOnDemand" :method-fn SayHelloOnDemand-dispatch :server-streaming true :client-streaming true :input pb->HelloRequest :output new-HelloReply}
   {:pkg "example.hello" :service "Greeter" :method "SayHelloError" :method-fn SayHelloError-dispatch :server-streaming false :client-streaming false :input pb->HelloRequest :output new-HelloReply}
   {:pkg "example.hello" :service "Greeter" :method "SayNil" :method-fn SayNil-dispatch :server-streaming false :client-streaming false :input pb->HelloRequest :output new-HelloReply}])


;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; GRPC protojure.test.grpc.TestService Client Implementation
;;;----------------------------------------------------------------------------------
(ns protojure.test.grpc.TestService.client
  (:require [protojure.test.grpc :refer :all]
            [com.google.protobuf :as com.google.protobuf]
            [clojure.core.async :as async]
            [protojure.grpc.client.utils :refer [send-unary-params invoke-unary]]
            [promesa.core :as p]
            [protojure.grpc.client.api :as grpc]))

;-----------------------------------------------------------------------------
; GRPC Client Implementation
;-----------------------------------------------------------------------------

(def TestService-service-name "protojure.test.grpc.TestService")

(defn BandwidthTest
  ([client params] (BandwidthTest client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "BandwidthTest"
              :input   {:f protojure.test.grpc/new-BigPayload :ch input}
              :output  {:f protojure.test.grpc/pb->BigPayload :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn ClientCloseDetect
  ([client params reply] (ClientCloseDetect client {} params reply))
  ([client metadata params reply]
  (let [input (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "ClientCloseDetect"
              :input   {:f protojure.test.grpc/new-CloseDetectRequest :ch input}
              :output  {:f com.google.protobuf/pb->Any :ch reply}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc)))))))

(defn FlowControl
  ([client params reply] (FlowControl client {} params reply))
  ([client metadata params reply]
  (let [input (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "FlowControl"
              :input   {:f protojure.test.grpc/new-FlowControlRequest :ch input}
              :output  {:f protojure.test.grpc/pb->FlowControlPayload :ch reply}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc)))))))

(defn ReturnError
  ([client params] (ReturnError client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "ReturnError"
              :input   {:f protojure.test.grpc/new-ErrorRequest :ch input}
              :output  {:f com.google.protobuf/pb->Empty :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn AllEmpty
  ([client params] (AllEmpty client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "AllEmpty"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f com.google.protobuf/pb->Empty :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn ServerCloseDetect
  ([client params reply] (ServerCloseDetect client {} params reply))
  ([client metadata params reply]
  (let [input (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "ServerCloseDetect"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f com.google.protobuf/pb->Any :ch reply}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc)))))))

(defn Async
  ([client params] (Async client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "Async"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f protojure.test.grpc/pb->SimpleResponse :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn DeniedStreamer
  ([client params reply] (DeniedStreamer client {} params reply))
  ([client metadata params reply]
  (let [input (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "DeniedStreamer"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f com.google.protobuf/pb->Empty :ch reply}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc)))))))

(defn AsyncEmpty
  ([client params reply] (AsyncEmpty client {} params reply))
  ([client metadata params reply]
  (let [input (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "AsyncEmpty"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f com.google.protobuf/pb->Empty :ch reply}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc)))))))

(defn Metadata
  ([client params] (Metadata client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "Metadata"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f protojure.test.grpc/pb->SimpleResponse :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))

(defn ReturnErrorStreaming
  ([client params reply] (ReturnErrorStreaming client {} params reply))
  ([client metadata params reply]
  (let [input (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "ReturnErrorStreaming"
              :input   {:f protojure.test.grpc/new-ErrorRequest :ch input}
              :output  {:f com.google.protobuf/pb->Empty :ch reply}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (grpc/invoke client desc)))))))

(defn ShouldThrow
  ([client params] (ShouldThrow client {} params))
  ([client metadata params]
  (let [input (async/chan 1)
        output (async/chan 1)
        desc {:service "protojure.test.grpc.TestService"
              :method  "ShouldThrow"
              :input   {:f com.google.protobuf/new-Empty :ch input}
              :output  {:f com.google.protobuf/pb->Empty :ch output}
              :metadata metadata}]
    (-> (send-unary-params input params)
        (p/then (fn [_] (invoke-unary client desc output)))))))


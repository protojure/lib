syntax = "proto3";
package protojure.test.grpc;

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

message CloseDetectRequest {
    string id = 1;
}

message FlowControlRequest {
    int32 count = 1;
    int32 payload_size = 2;

}

message FlowControlPayload {
    int32 id = 1;
    bytes data = 2;
}

message SimpleRequest {
    string input = 1;
}

message SimpleResponse {
    string msg = 1;
}

message ErrorRequest {
    int32 status = 1;
    string message = 2;
}

message BigPayload {
    enum Mode {
        MODE_INVALID  = 0;
        MODE_UPLOAD   = 1;
        MODE_DOWNLOAD = 2;
        MODE_BIDI     = 3;
    }

    Mode  mode = 1;
    bytes data = 2;
}

service TestService {
    rpc ClientCloseDetect (CloseDetectRequest) returns (stream google.protobuf.Any);
    rpc ServerCloseDetect (google.protobuf.Empty) returns (stream google.protobuf.Any);
    rpc FlowControl (FlowControlRequest) returns (stream FlowControlPayload);
    rpc Metadata (google.protobuf.Empty) returns (SimpleResponse);
    rpc ShouldThrow (google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc Async (google.protobuf.Empty) returns (SimpleResponse);
    rpc AllEmpty(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc AsyncEmpty(google.protobuf.Empty) returns (stream google.protobuf.Empty);
    rpc DeniedStreamer(google.protobuf.Empty) returns (stream google.protobuf.Empty);
    rpc ReturnError(ErrorRequest) returns (google.protobuf.Empty);
    rpc ReturnErrorStreaming(ErrorRequest) returns (stream google.protobuf.Empty);
    rpc BandwidthTest(BigPayload) returns (BigPayload);
    rpc BidirectionalStreamTest(stream SimpleRequest) returns (stream SimpleResponse);
}
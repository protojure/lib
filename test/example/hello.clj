;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package com.sttgts.omnia.hello
;;;----------------------------------------------------------------------------------
(ns example.hello
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :refer :all]
            [protojure.protobuf.serdes.complex :refer :all]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as stream]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->HelloRequest)
(declare ecis->HelloRequest)
(declare new-HelloRequest)
(declare cis->RepeatHelloRequest)
(declare ecis->RepeatHelloRequest)
(declare new-RepeatHelloRequest)
(declare cis->HelloReply)
(declare ecis->HelloReply)
(declare new-HelloReply)

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; HelloRequest
;-----------------------------------------------------------------------------
(defrecord HelloRequest [name]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)))

(s/def :com.sttgts.omnia.hello.messages.HelloRequest/name string?)
(s/def ::HelloRequest-spec (s/keys :opt-un [:com.sttgts.omnia.hello.messages.HelloRequest/name]))
(def HelloRequest-defaults {:name ""})

(defn cis->HelloRequest
  "CodedInputStream to HelloRequest"
  [is]
  (->> (tag-map HelloRequest-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->HelloRequest)))

(defn ecis->HelloRequest
  "Embedded CodedInputStream to HelloRequest"
  [is]
  (cis->embedded cis->HelloRequest is))

(defn new-HelloRequest
  "Creates a new instance from a map, similar to map->HelloRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::HelloRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::HelloRequest-spec init))))]}
  (-> (merge HelloRequest-defaults init)
      (map->HelloRequest)))

(defn pb->HelloRequest
  "Protobuf to HelloRequest"
  [input]
  (-> input
      stream/new-cis
      cis->HelloRequest))

;-----------------------------------------------------------------------------
; RepeatHelloRequest
;-----------------------------------------------------------------------------
(defrecord RepeatHelloRequest [name count]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:name this) os)
    (write-Int32 2  {:optimize true} (:count this) os)))

(s/def :com.sttgts.omnia.hello.messages.RepeatHelloRequest/name string?)
(s/def :com.sttgts.omnia.hello.messages.RepeatHelloRequest/count int?)
(s/def ::RepeatHelloRequest-spec (s/keys :opt-un [:com.sttgts.omnia.hello.messages.RepeatHelloRequest/name :com.sttgts.omnia.hello.messages.RepeatHelloRequest/count]))
(def RepeatHelloRequest-defaults {:name "" :count 0})

(defn cis->RepeatHelloRequest
  "CodedInputStream to RepeatHelloRequest"
  [is]
  (->> (tag-map RepeatHelloRequest-defaults
                (fn [tag index]
                  (case index
                    1 [:name (cis->String is)]
                    2 [:count (cis->Int32 is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->RepeatHelloRequest)))

(defn ecis->RepeatHelloRequest
  "Embedded CodedInputStream to RepeatHelloRequest"
  [is]
  (cis->embedded cis->RepeatHelloRequest is))

(defn new-RepeatHelloRequest
  "Creates a new instance from a map, similar to map->RepeatHelloRequest except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::RepeatHelloRequest-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::RepeatHelloRequest-spec init))))]}
  (-> (merge RepeatHelloRequest-defaults init)
      (map->RepeatHelloRequest)))

(defn pb->RepeatHelloRequest
  "Protobuf to RepeatHelloRequest"
  [input]
  (-> input
      stream/new-cis
      cis->RepeatHelloRequest))

;-----------------------------------------------------------------------------
; HelloReply
;-----------------------------------------------------------------------------
(defrecord HelloReply [message]
  pb/Writer

  (serialize [this os]
    (write-String 1  {:optimize true} (:message this) os)))

(s/def :com.sttgts.omnia.hello.messages.HelloReply/message string?)
(s/def ::HelloReply-spec (s/keys :opt-un [:com.sttgts.omnia.hello.messages.HelloReply/message]))
(def HelloReply-defaults {:message ""})

(defn cis->HelloReply
  "CodedInputStream to HelloReply"
  [is]
  (->> (tag-map HelloReply-defaults
                (fn [tag index]
                  (case index
                    1 [:message (cis->String is)]

                    [index (cis->undefined tag is)]))
                is)
       (map->HelloReply)))

(defn ecis->HelloReply
  "Embedded CodedInputStream to HelloReply"
  [is]
  (cis->embedded cis->HelloReply is))

(defn new-HelloReply
  "Creates a new instance from a map, similar to map->HelloReply except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::HelloReply-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::HelloReply-spec init))))]}
  (-> (merge HelloReply-defaults init)
      (map->HelloReply)))

(defn pb->HelloReply
  "Protobuf to HelloReply"
  [input]
  (-> input
      stream/new-cis
      cis->HelloReply))


;;;----------------------------------------------------------------------------------
;;; Generated by protoc-gen-clojure.  DO NOT EDIT
;;;
;;; Message Implementation of package protojure.test.metadata
;;;----------------------------------------------------------------------------------
(ns protojure.test.metadata
  (:require [protojure.protobuf.protocol :as pb]
            [protojure.protobuf.serdes.core :as serdes.core]
            [protojure.protobuf.serdes.complex :as serdes.complex]
            [protojure.protobuf.serdes.utils :refer [tag-map]]
            [protojure.protobuf.serdes.stream :as serdes.stream]
            [com.google.protobuf :as com.google.protobuf]
            [clojure.set :as set]
            [clojure.spec.alpha :as s]))

;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Forward declarations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

(declare cis->Response)
(declare ecis->Response)
(declare new-Response)


;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------
;; Message Implementations
;;----------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
; Response
;-----------------------------------------------------------------------------
(defrecord Response-record [msg]
  pb/Writer
  (serialize [this os]
    (serdes.core/write-String 1  {:optimize true} (:msg this) os))
  pb/TypeReflection
  (gettype [this]
    "protojure.test.metadata.Response"))

(s/def :protojure.test.metadata.Response/msg string?)
(s/def ::Response-spec (s/keys :opt-un [:protojure.test.metadata.Response/msg ]))
(def Response-defaults {:msg "" })

(defn cis->Response
  "CodedInputStream to Response"
  [is]
  (->> (tag-map Response-defaults
         (fn [tag index]
             (case index
               1 [:msg (serdes.core/cis->String is)]

               [index (serdes.core/cis->undefined tag is)]))
         is)
        (map->Response-record)))

(defn ecis->Response
  "Embedded CodedInputStream to Response"
  [is]
  (serdes.core/cis->embedded cis->Response is))

(defn new-Response
  "Creates a new instance from a map, similar to map->Response except that
  it properly accounts for nested messages, when applicable.
  "
  [init]
  {:pre [(if (s/valid? ::Response-spec init) true (throw (ex-info "Invalid input" (s/explain-data ::Response-spec init))))]}
  (-> (merge Response-defaults init)
      (map->Response-record)))

(defn pb->Response
  "Protobuf to Response"
  [input]
  (cis->Response (serdes.stream/new-cis input)))

(def ^:protojure.protobuf.any/record Response-meta {:type "protojure.test.metadata.Response" :decoder pb->Response})

